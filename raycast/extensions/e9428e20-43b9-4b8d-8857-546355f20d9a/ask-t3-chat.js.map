{
  "version": 3,
  "sources": ["../src/ask-t3-chat.ts", "../src/utils/model-check.ts"],
  "sourcesContent": ["import { getPreferenceValues, LaunchProps, open, showHUD } from \"@raycast/api\";\nimport { isSearchGroundingSupported } from \"./utils/model-check\";\n\nexport default async function Command(props: LaunchProps<{ arguments: Arguments.AskT3Chat }>) {\n  const { model, useBeta } = getPreferenceValues<Preferences.AskT3Chat>();\n\n  const domain = useBeta ? \"beta.t3.chat\" : \"t3.chat\";\n  const enableSearch = props.arguments.search === \"true\";\n\n  const url = new URL(`https://${domain}/new`);\n  url.searchParams.set(\"q\", props.arguments.query ?? props.fallbackText ?? \"\");\n  url.searchParams.set(\"model\", model);\n  if (enableSearch) {\n    url.searchParams.set(\"search\", \"true\");\n  }\n\n  if (enableSearch && !isSearchGroundingSupported(model)) {\n    await showHUD(\"Search grounding is not supported for this model\");\n  }\n\n  await open(url.toString());\n}\n", "export const isSearchGroundingSupported = (model: string) => {\n  return model.includes(\"gemini\");\n};\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAgE,wBCAzD,IAAMC,EAA8BC,GAClCA,EAAM,SAAS,QAAQ,EDEhC,eAAOC,EAA+BC,EAAwD,CAC5F,GAAM,CAAE,MAAAC,EAAO,QAAAC,CAAQ,KAAI,uBAA2C,EAEhEC,EAASD,EAAU,eAAiB,UACpCE,EAAeJ,EAAM,UAAU,SAAW,OAE1CK,EAAM,IAAI,IAAI,WAAWF,CAAM,MAAM,EAC3CE,EAAI,aAAa,IAAI,IAAKL,EAAM,UAAU,OAASA,EAAM,cAAgB,EAAE,EAC3EK,EAAI,aAAa,IAAI,QAASJ,CAAK,EAC/BG,GACFC,EAAI,aAAa,IAAI,SAAU,MAAM,EAGnCD,GAAgB,CAACE,EAA2BL,CAAK,GACnD,QAAM,WAAQ,kDAAkD,EAGlE,QAAM,QAAKI,EAAI,SAAS,CAAC,CAC3B",
  "names": ["ask_t3_chat_exports", "__export", "Command", "__toCommonJS", "import_api", "isSearchGroundingSupported", "model", "Command", "props", "model", "useBeta", "domain", "enableSearch", "url", "isSearchGroundingSupported"]
}
